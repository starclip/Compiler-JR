	; movLiteral destino, origen L 
 	; ---------------------------  
 	mov eax, 10         
 	mov [esp + 0], ax  
 	; ---------------------------  
 		; add  op1, Literal, result 
 	; ---------------------------  
 	mov eax, 15 
 	mov ebx, [esp + 8] 
 	add eax, ebx 
 	mov [esp + 12], ax 
 	; ---------------------------  
 
 	; mov destino, origen 
 	; ---------------------------  
 	mov eax, [esp + 12] 
 	mov [esp + 4], ax 
 	; ---------------------------  
 		; add Literal, result 
  	; ---------------------------  
 	mov eax, 20        
 	mov [esp + 20], ax   
 	; ---------------------------  
 
 	; mov destino, origen 
 	; ---------------------------  
 	mov eax, [esp + 20] 
 	mov [esp + 16], ax 
 	; ---------------------------  
 		; add  op1, op2, result 
 	; ---------------------------  
 	mov eax, [esp + 0] 
 	mov ebx, [esp + 4] 
 	add eax, ebx 
 	mov [esp + 28], ax 
 	; ---------------------------  
 
 	; add  op1, op2, result 
 	; ---------------------------  
 	mov eax, [esp + 28] 
 	mov ebx, [esp + 8] 
 	add eax, ebx 
 	mov [esp + 32], ax 
 	; ---------------------------  
 
 	; mov destino, origen 
 	; ---------------------------  
 	mov eax, [esp + 32] 
 	mov [esp + 24], ax 
 	; ---------------------------  
 		; sub  op1, op2, result 
 	; ---------------------------  
 	mov eax, [esp + 24] 
 	mov ebx, [esp + 0] 
 	sub eax, ebx 
 	mov [esp + 40], ax 
 	; ---------------------------  
 
 	; mov destino, origen 
 	; ---------------------------  
 	mov eax, [esp + 40] 
 	mov [esp + 36], ax 
 	; ---------------------------  
 		; Leer de consola -> read 
 	; ------------------------  
 	; 
 
 	mov eax, 3 	; EAX -> read  
 	mov ebx, 0 	; EBX -> input 
 	mov ecx, buffer_input ; ECX -> valor en que se almacena   
 	mov edx, len_input	; EDX -> largo de lo que voy a leer 
 	int 0x80 	; llamada al sistema operativo    
  
 	mov edi, eax 
 	xor edx, edx 
  	xor esi, esi 
  	xor eax, eax 
  	mov ebx, 10  
  				 
  	dec edi		 
  	call atoi   
  	mov [esp + 44], ax 
 	; Realiza el read -> y se almacena en memoria. 
 	; ---------------------------  
 
 	; Escribir en consola -> write 
 	; ---------------------------  
 	; 
 	mov ax, [esp + 24]  ; pongo en el ax e
 	mov ebx, 10 
 	mov esi, 30 
 	call itoa   
 	
 	mov eax, 4 	; EAX -> write  
 	mov ebx, 1 	; EBX -> input  
 	mov ecx, buffer_output ; ECX -> valor que se va a imprimir     
 	mov edx, len_output	; EDX -> largo de lo que voy a escribir 
 	int 0x80 	; llamada al sistema operativo      
 	; ---------------------------  
 
 